/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.frkator.test.results.diff;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

class SmokeTest {

    @Test void testApp() throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        App app = new App(
                new Arguments(new String[]{
                        "src/test/resources/byte-buddy-1",
                        "src/test/resources/byte-buddy-2",
                }),
                new PrintStream(byteArrayOutputStream),
                true,
                null
        );
        Assertions.assertEquals(
                "[net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest [9/0/0/0], net.bytebuddy.asm.AdviceAnnotationTest [42/0/0/0], net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest [4/0/0/0], net.bytebuddy.agent.AttacherTest [4/0/0/0], net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/0/0/0]]",
                app.leftSet.toString()
        );
        Assertions.assertEquals(
                "[net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest [9/0/0/0], net.bytebuddy.asm.AdviceAnnotationTest [42/0/0/0], net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest [4/0/0/0], net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest [2/0/0/0], net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/2/0/0]]",
                app.rightSet.toString()
        );
    }

    @Test void testSuiteReport() throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        App app = new App(
                new Arguments(new String[]{
                        "src/test/resources/byte-buddy-1",
                        "src/test/resources/byte-buddy-2",
                }),
                new PrintStream(byteArrayOutputStream),
                true,
                null
        );
        new SuiteReport(app).process();
        Assertions.assertEquals(
               "only left\n" +
                       "net.bytebuddy.agent.AttacherTest [4/0/0/0]\n" +
                       "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/0/0/0]\n" +
                       "only right\n" +
                       "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest [2/0/0/0]\n" +
                       "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/2/0/0]\n" +
                       "common\n" +
                       "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest [9/0/0/0]\n" +
                       "net.bytebuddy.asm.AdviceAnnotationTest [42/0/0/0]\n" +
                       "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest [4/0/0/0]\n",
                byteArrayOutputStream.toString()
        );
    }

    @Test void testCaseReportOnlySuccess() throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        App app = new App(
                new Arguments(new String[]{
                        "src/test/resources/byte-buddy-1",
                        "src/test/resources/byte-buddy-2",
                }),
                new PrintStream(byteArrayOutputStream),
                false,
                true
        );
        new CaseReport(app).process();
        Assertions.assertEquals(
                "only left\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/0/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessor:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testSimpleAccessor:passed\n" +
                        "net.bytebuddy.agent.AttacherTest [4/0/0/0]\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachmentEmptyArgument:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testConstructorThrowsException:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachmentMissingArgument:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachment:passed\n" +
                        "\n" +
                        "only right\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest [2/0/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest.testKnownAccessor:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest.testKnownAgent:passed\n"+
                        "\n",
                byteArrayOutputStream.toString()
        );
    }

    @Test void testCaseReportOnlyFailed() throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        App app = new App(
                new Arguments(new String[]{
                        "src/test/resources/byte-buddy-1",
                        "src/test/resources/byte-buddy-2",
                }),
                new PrintStream(byteArrayOutputStream),
                false,
                false
        );
        new CaseReport(app).process();
        Assertions.assertEquals(
                "only left\n" +
                        "\n" +
                        "only right\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/2/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessor:java.lang.AssertionError\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testSimpleAccessor:java.lang.AssertionError\n" +
                        "\n",
                byteArrayOutputStream.toString()
        );
    }

    @Test void testCaseReportAll() throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        App app = new App(
                new Arguments(new String[]{
                        "src/test/resources/byte-buddy-1",
                        "src/test/resources/byte-buddy-2",
                }),
                new PrintStream(byteArrayOutputStream),
                true,
                null
        );
        new CaseReport(app).process();
        Assertions.assertEquals(
                "only left\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/0/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessor:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testSimpleAccessor:passed\n" +
                        "net.bytebuddy.agent.AttacherTest [4/0/0/0]\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachmentEmptyArgument:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testConstructorThrowsException:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachmentMissingArgument:passed\n" +
                        "net.bytebuddy.agent.AttacherTest.testPseudoAttachment:passed\n" +
                        "\n" +
                        "only right\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/2/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessor:java.lang.AssertionError\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testSimpleAccessor:java.lang.AssertionError\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest [2/0/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest.testKnownAccessor:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAgentProviderTest.testKnownAgent:passed\n" +
                        "\n" +
                        "common\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest [42/0/0/0]\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[0]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[0]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[0]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[1]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[1]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[1]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[2]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[2]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[2]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[3]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[3]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[3]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[4]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[4]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[4]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[5]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[5]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[5]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[6]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[6]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[6]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[7]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[7]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[7]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[8]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[8]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[8]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[9]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[9]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[9]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[10]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[10]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[10]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[11]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[11]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[11]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[12]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[12]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[12]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testDocumented[13]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testVisible[13]:passed\n" +
                        "net.bytebuddy.asm.AdviceAnnotationTest.testTarget[13]:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest [5/0/0/0]\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testSimpleAccessorWithoutExternalAttachment:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessorThrowsExceptionForType:passed\n" +
                        "net.bytebuddy.agent.ByteBuddyAgentAttachmentProviderTest.testUnavailableAccessorThrowsExceptionForExternalAttachment:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest [9/0/0/0]\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testLongExitOnlyMethodAssignment:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testLongMethod:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testShortExitOnlyMethod:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testShortMethodAssignment:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testShortMethod:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testLongMethodAssignment:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testConstructorNotSupported:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testLongExitOnlyMethod:passed\n" +
                        "net.bytebuddy.asm.AdviceArgumentHandlerCopyingTest.testShortExitOnlyMethodAssignment:passed\n" +
                        "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest [4/0/0/0]\n" +
                        "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest.testGlobalLock:passed\n" +
                        "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest.testCircularityLockDefault:passed\n" +
                        "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest.testCircularityLockInactive:passed\n" +
                        "net.bytebuddy.agent.builder.AgentBuilderCircularityLockTest.testGlobalLockWithTimeout:passed\n" +
                        "\n",
                byteArrayOutputStream.toString()
        );
    }
}
